#include <msp430G2553.h>
#include <stdio.h>
#include <stdlib.h>


#define INT_MAX  2147483647

volatile float temp_max, temp_min,temp_atual; //global variables


void setup_buzzer(){
    P1DIR |= BIT6; //Set pin 1.2 to the output direction.
    P1SEL |= BIT6; //Select pin 1.2 as our PWM output.

}

void buzzer_checkup(){
    if(temp_atual> temp_max){
        TA0CCR0 = 1000; //Set the period in the Timer A0 Capture/Compare 0 register to 1000 us.
        TA0CCTL1 = OUTMOD_7;
        TA0CCR1 = 500; //The period in microseconds that the power is ON. It's half the time, which translates to a 50% duty cycle.
         TA0CTL = TASSEL_2 + MC_1; //TASSEL_2 selects SMCLK as the clock source, and MC_1 tells it to count up to the
    }
    if(temp_atual<temp_max){
        TA0CTL = MC_0 ;// set P2.2 output as hight
    }
}









void testbenchl(){
    temp_max = 50;//teste 50 graus
    temp_min = 20;// teste 20 graus
    temp_atual = 0;//test bench tempo 0 graus
}

void delay(){//testbench esperar tempo
    int i,f,c;
    for(i=INT_MAX;i>1;--i){
        for(f=INT_MAX;f>1;--f){
            for(c=INT_MAX;c>1;--c);
        }
    }

}


int main(void)
{
    WDTCTL = WDTPW | WDTHOLD;   // stop watchdog timer
    setup_buzzer();
    TA0CCR0 = 500; //Set the period in the Timer A0 Capture/Compare 0 register to 1000 us.
    TA0CCTL1 = OUTMOD_7;
    TA0CCR1 = 100; //The period in microseconds that the power is ON. It's half the time, which translates to a 50% duty cycle.
    TA0CTL = TASSEL_2 + MC_1; //TASSEL_2 selects SMCLK as the clock source, and MC_1 tells it to count up to the

    while(1){
        //buzzer_checkup();
       // delay();
       // temp_atual = 40;
       // buzzer_checkup();
        //delay();
       // temp_atual = 60;
       // buzzer_checkup();
        //delay();
        //temp_atual = 80;
    }




    return 0;
}

